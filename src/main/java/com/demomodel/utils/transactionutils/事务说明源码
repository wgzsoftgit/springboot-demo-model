package org.springframework.transaction;

import java.sql.Connection;

public interface TransactionDefinition {
传播  7种
   int PROPAGATION_REQUIRED = 0; 
   //事务传播级别1：当前如果有事务，Spring就会使用该事务；否则会开始一个新事务；(这也是默认设置和定义）

   int PROPAGATION_SUPPORTS = 1;
   //事务传播级别2：如果有事务，Spring就会使用该事务；否则不会开始一个新事务

   int PROPAGATION_MANDATORY = 2;  
   //事务传播级别3：当前如果有事务，Spring就会使用该事务；否则会因为没有事务而抛出异常
   
   int PROPAGATION_REQUIRES_NEW = 3;
   //事务传播级别4：总是要开启一个新事务。如果当前已经有事务，则将已有事务挂起
     REQUIRES_NEW 行为强调了独立性。它保证了每个事务状态管理范围内锁使用的数据库连接是彼此不一样的。
     例如独立事务会满足“A事务中存在B事务，当B事务递交的时候不影响A事务。A，B两个事务之间不存在相互关联关系。“

   int PROPAGATION_NOT_SUPPORTED = 4;
   //事务传播级别5：代码总是在非事务环境下执行，如果当前有事务，则将已有事务挂起，再执行代码，之后恢复事务

   int PROPAGATION_NEVER = 5; 
   //事务传播级别6：绝对不允许代码在事务中执行。如果当前运行环境有事务存在，则直接抛出异常，结束运行

   int PROPAGATION_NESTED = 6;
   //事务传播级别7：该级别支持嵌套事务执行。如果没有父事务存在，那么执行情况与PROPAGATION_REQUIRED一样；
   典型的应用是批量数据入库，开启父事务对一批数据入库，而对于每条入库的数据
   都有一个子事务对应，那么当所有的子事务成功，父事务提交，才算成功，否则，就都失败。

隔离     5种    
   int ISOLATION_DEFAULT = -1;
//事务隔离级别1：默认的隔离级别，同数据库一样的，如果不做特别设置，mysql默认的是可重复读，而oracle默认的是读提交

   int ISOLATION_READ_UNCOMMITTED = Connection.TRANSACTION_READ_UNCOMMITTED;
//事务隔离级别2：读未提交，即一个事务可以读取另外一个事务中未提交的数据，即脏读数据存在，性能最好，但是没啥用。
   
   
   oracle数据库默认隔离级别    -----------读提交
   int ISOLATION_READ_COMMITTED = Connection.TRANSACTION_READ_COMMITTED;
//事务隔离级别3：读提交，即一个事务只能读取到另一个事务提交后的数据，oracle数据库默认隔离级别；存在不可重复读问题，
即交叉事务出现，A事务两次读取数据可能会读到B事务提交的修改后的数据，即在同一个事务中读到了不同的数据，也叫不可重复读

  mysql默认的隔离级别   ------------可重复读
   int ISOLATION_REPEATABLE_READ = Connection.TRANSACTION_REPEATABLE_READ;
//事务隔离级别4：可重复读，即一个事务只能读取到在次事务之前提交的数据，而之后提交不能读取到，不管对方的事务是否提交都读取不到，
mysql默认的隔离级别。此隔离级别有可能会遇到幻读现象，但是mysql 基于innodb引擎实现的数据库已经通过多版本控制解决了
此问题，所以可以不考虑了。

int ISOLATION_SERIALIZABLE = Connection.TRANSACTION_SERIALIZABLE;  
//事务隔离级别2：序列化读，每次都是全表锁，性能最差，安全性最高，一般场景不适用，也没有这个必要。