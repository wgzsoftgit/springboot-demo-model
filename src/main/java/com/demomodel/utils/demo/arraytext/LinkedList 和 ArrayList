LinkedList 和 ArrayList 
LinkedList 其实是一个双向链表
1）LinkedList 包含一个非常重要的内部类——Node。Node 是节点所对应的数据结构，item 为当前节点的值，prev 为上一个节点，next 为下一个节点——这也正是“双向”链表的原因。first 为 LinkedList 的第一个节点，last 为最后一个节点。
2）size 是 LinkedList 的节点个数。当往 LinkedList 添加一个元素时，size+1，删除一个元素时，size-1。

ArrayList 其实是一个动态数组
1）elementData 是 Object 类型的数组，用来保存添加到 ArrayList 中的元素。如果通过默认构造参数创建 ArrayList 对象时，elementData 的默认大小是 10。当 ArrayList 容量不足以容纳全部元素时，就会重新设置容量，新的容量 = 原始容量 + (原始容量 >> 1)
运算符还没有驾驭了。不过，通过代码测试后的结论是，(1.5倍扩容)当原始容量为 10 的时候，新的容量为 15；当原始容量为 20 的时候，新的容量为 30。
2） size 是 ArrayList 的元素个数。当往 ArrayList 添加一个元素时，size+1，删除一个元素时，size-1。

由于 LinkedList 和 ArrayList 底层实现的不同（一个双向链表，一个动态数组），它们之间的区别也很一目了然。

关键点1 ：LinkedList 在添加（add(E e)）、插入（add(int index, E element)）、删除（remove(int index)）元素的性能上远超 ArrayList。
ArrayList 在添加、插入、删除元素的时候，会有意或者无意（扩容）的调用 System.arraycopy(Object src, int srcPos, Object dest, int destPos, int length) 方法，该方法对性能的损耗是非常严重的
LinkedList 不存在扩容的问题，也不需要对原有的元素进行复制；只需要改变节点的数据就好了。
关键点2：LinkedList 在查找元素时要慢于 ArrayList







ArrayList 
继承 AbstractList   实现List  RandomAccess  Cloneable  Serializable
RandomAccess 标记接口  内部是空的 ,标记"这个接口的类支持快速(通常是固定时间)随机访问",
快速随机访问就是说不需要遍历,就可以通过下标(索引)直接访问到内存地址
public E get(int index) {}
public E set(int index) {}

Cloneable表示支持拷贝,内部重写Object类的clone()方法

Serializable 支持序列化  ,序列化是指将对象转换乘以字节序列化形式表示,这些字节序中包含了对象的字段和方法
序列化对象可以被写到数据库,写到文件,也可以用于网络传输
 transient Object[] elementData;  transient不支持序列化
默认数组大小是10,当添加第11个元素的时候,数组的长度扩容1.5倍,也就是15,意味着有4个内存空间闲置\
如果把整个数组序列化就多序列化4个空间,当元素很大时候,就会多序列化很大空间
arrayList内部提供私有方法解决:private void writeObject(java.io.ObjectOutputStream s)}
 private void readObject(java.io.ObjectInputStream s){}
 

 
 LinkedList
 继承AbstractSequentialList 实现List Deque Cloneable  Serializable
 RandomAccess 标记接口  内部是空的 ,标记"这个接口的类支持快速(通常是固定时间)随机访问",
快速随机访问就是说不需要遍历,就可以通过下标(索引)直接访问到内存地址
public E get(int index) {}
public E set(int index) {}

 Cloneable表示支持拷贝,内部重写Object类的clone()方法
 
 Serializable 支持序列化  ,序列化是指将对象转换乘以字节序列化形式表示,这些字节序中包含了对象的字段和方法
序列化对象可以被写到数据库,写到文件,也可以用于网络传输
size first last 使用了transient,答案是LinkedList按照自己的方式来序列化自己实现方法有
 内部提供私有方法解决:private void writeObject(java.io.ObjectOutputStream s)}
 private void readObject(java.io.ObjectInputStream s){}
 
 