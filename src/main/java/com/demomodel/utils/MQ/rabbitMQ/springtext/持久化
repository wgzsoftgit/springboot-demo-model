 如何避免消息丢失？

1） 消费者的ACK机制。可以防止消费者丢失消息。

2） 但是，如果在消费者消费之前，RabbitMQ就宕机了，消息就没了。

如何解决？

应该将队列、Exchange，消息都进行持久化。
 // 声明队列持久化               //创建一个持久化，非排他的，非自动删除的队列
        channel.queueDeclare(QUEUE_NAME, true, false, false, null);
        
        
        
    //交换机持久化   
        channel.exchangeDeclare(EXCHANGE_NAME, "direct",true);
        //创建一个type="direct" 、持久化，非自动删除的交换器
        channel.exchangeDeclare(EXCHANGE_NAME,"direct",true,false,null);
   DeclareOk exchangeDeclare(String exchange, String type, boolean durable, 
    boolean autodelete,boolean internal, Map<String, Object> arguments) 
        exchange:交换器的名称。
type:交换器的类型，常见的如fanout、direct、topic，header 详情看上一章。
durable:设置是否持久化。durable设置为true表示持久化，反之是非持久化。持久化可以将交换器存盘，在服务器重启的时候不会丢失相关信息。
autoDelete:设置是否自动删除。autoDelete设置为true则表示自动删除。自动删除的前提是至少有一个队列或者交换器与这个交换器绑定，之后所有与这个交换器绑定的队列或者交换器都与此解绑。注意不能错误地把这个参数理解为:"当与此交换器连接的客户端都断开时，RabbitMQ会自动删除本交换器"。
internal:设置是否是内置的。如果设置为true，则表示是内置的交换器，客户端程序无法直接发送消息到这个交换器中，只能通过交换器路由到交换器这种方式。
argument:其他一些结构化参数，比如alternate-exchange(有alternate­exchange的详情后面介绍)。
 
 
 
 //消息持久化：
        channel.basicPublish(EXCHANGE_NAME, "", MessageProperties.PERSISTENT_TEXT_PLAIN, message.getBytes());
        exchange:交换器的名称，指明消息需要发送到哪个交换器中。如果设置为空字符串，则消息会被发送到RabbitMQ默认的交换器中。
routingKey:路由键，交换器根据路由键将消息存储到相应的队列之中。
props:消息的基本属性集，其包含14个属性成员，分别有contentType、contentEncoding、headers(Map<String，Object>)、deliveryMode、priority、correlationld、replyTo、expiration、messageld、timestamp、type、userld、appld、clusterld。其中常用的几种都在上面的示例中进行了演示。
byte[] body:消息体(payload)，真正需要发送的消息。
mandatory和immediate的详细内容后面讲解