为需要保证幂等性的每一次请求创建一个唯一标识token, 先获取token, 并将此token存入redis, 
请求接口时, 将此token放到header或者作为请求参数请求接口, 后端接口判断redis中是否存在此token:

如果存在, 正常处理业务逻辑, 并从redis中删除此token, 那么, 如果是重复请求, 由于token已被删除, 则不能通过校验, 
返回请勿重复操作提示
如果不存在, 说明参数不合法或者是重复请求, 返回提示即可

作者：wangzaiplus
链接：https://www.jianshu.com/p/6189275403ed
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

场景
不管是传统行业还是互联网行业，我们都需要保证大部分操作是幂等性的，简单点说，就是无论用户点击多少次，操作多少遍，
产生的结果都是一样的，是唯一的。而今次公司的项目里，又被我遇到了这么一个幂等性的问题，就是用户的余额充值、创建订单和订单支付，
不管用户点击多少次，只会有一条充值记录，一条新订单记录，一条订单支付记录。

技术方案
现在使用比较广泛的方案都是基于Redis。
方案：Redis+token

处理流程：数据提交前，前端要向服务端的申请token，token（带有过期时间）放到redis；当数据提交时带上token，
如果删除token成功则表明token未过期，然后进行业务逻辑，否则就是token已过期，提示前端请勿重复提交数据。
而我将使用不同的方案。因为此时前后端对接已走一半，不想让前端再增加请求token的接口（毕竟后端能搞定的，还是别麻烦前端同学了）。
方案：自定义注解+分布式锁

处理流程：将需要幂等性的接口加上自定义注解。然后编写一个切面，在around方法里逻辑：尝试获取分布式锁(带过期时间)，成功表明没
重复提交，否则就是重复提交了