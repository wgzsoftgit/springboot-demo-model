Class类的常用方法

1、getName() 

一个Class对象描述了一个特定类的属性，Class类中最常用的方法getName以 String 的形式返回此 Class 对象所表示的实体（类、接口、数组类、基本类型或 void）名称。

2、newInstance()

Class还有一个有用的方法可以为类创建一个实例，这个方法叫做newInstance()。例如：
    x.getClass.newInstance()，创建了一个同x一样类型的新实例。newInstance()方法调用默认构造器（无参数构造器）初始化新建对象。

3、getClassLoader() 

返回该类的类加载器。

   4、getComponentType() 
    返回表示数组组件类型的 Class。

   5、getSuperclass() 
    返回表示此 Class 所表示的实体（类、接口、基本类型或 void）的超类的 Class。

   6、isArray() 
    判定此 Class 对象是否表示一个数组类。
————————————————
版权声明：本文为CSDN博主「CrazyCodeBoy」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/fengyuzhengfan/java/article/details/38086743

Class的一些使用技巧

1、forName和newInstance结合起来使用，可以根据存储在字符串中的类名创建对象。例如
    Object obj = Class.forName(s).newInstance();

2、虚拟机为每种类型管理一个独一无二的Class对象。因此可以使用==操作符来比较类对象。例如：
    if(e.getClass() == Employee.class)
————————————————
版权声明：本文为CSDN博主「CrazyCodeBoy」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/fengyuzhengfan/java/article/details/38086743

 一.首先你要明白在java里面任何class都要装载在虚拟机上才能运行。

1.      forName这句话就是装载类用的(new是根据加载到内存中的类创建一个实例，要分清楚)。 

2.      至于什么时候用，可以考虑一下这个问题，给你一个字符串变量，它代表一个类的包名和类名，你怎么实例化它？

           A a = (A)Class.forName("pacage.A").newInstance();这和 A a =new A();是一样的效果。

3.      jvm在装载类时会执行类的静态代码段，要记住静态代码是和class绑定的，class装载成功就表示执行了你的静态代码了，而且以后不会再执行这段静态代码了。

4.      Class.forName(xxx.xx.xx)的作用是要求JVM查找并加载指定的类，也就是说JVM会执行该类的静态代码段。

5.      动态加载和创建Class 对象，比如想根据用户输入的字符串来创建对象

       String str = 用户输入的字符串  

       Class t = Class.forName(str);  

       t.newInstance(); 

 二.在初始化一个类，生成一个实例的时候，newInstance()方法和new关键字除了一个是方法，一个是关键字外，最主要有什么区别？

      1.它们的区别在于创建对象的方式不一样，前者是使用类加载机制，后者是创建一个新类。

      2.那么为什么会有两种创建对象方式？

        这主要考虑到软件的可伸缩、可扩展和可重用等软件设计思想。  
        Java中工厂模式经常使用newInstance()方法来创建对象，因此从为什么要使用工厂模式上可以找到具体答案。例如：

           class c = Class.forName(“Example”);  

           factory = (ExampleInterface)c.newInstance();  

       其中ExampleInterface是Example的接口，可以写成如下形式：

          String className = "Example";  

          class c = Class.forName(className);  

          factory = (ExampleInterface)c.newInstance();  

      进一步可以写成如下形式：

          String className = readfromXMlConfig;//从xml 配置文件中获得字符串

         class c = Class.forName(className);  

         factory = (ExampleInterface)c.newInstance();  

        上面代码已经不存在Example的类名称，它的优点是，无论Example类怎么变化，上述代码不变，甚至可以更换Example的兄弟类Example2 , Example3 , Example4……，只要他们继承ExampleInterface就可以。  
        3.从JVM的角度看，我们使用关键字new创建一个类的时候，这个类可以没有被加载。  但是使用newInstance()方法的时候，

         就必须保证：

              1、这个类已经加载；

              2、这个类已经连接了。

        而完成上面两个步骤的正是Class的静态方法forName()所完成的，这个静态方法调用了启动类加载器，即加载 java API的那个加载器。  
         现在可以看出，newInstance()实际上是把new这个方式分解为两步，即首先调用Class加载方法加载某个类，然后实例化。这样分步的好处是显而易见的。我们可以在调用class的静态加载方法forName时获得更好

         的灵活性，提供给了一种降耦的手段。  

三.最后用最简单的描述来区分new关键字和newInstance()方法的区别： 

1. newInstance: 弱类型。低效率。只能调用无参构造。  
         2. new: 强类型。相对高效。能调用任何public构造。
————————————————
版权声明：本文为CSDN博主「CrazyCodeBoy」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/fengyuzhengfan/java/article/details/38086743