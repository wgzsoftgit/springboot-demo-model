 AggregationBuilder agg1 = AggregationBuilders.terms("agg1").field(field1);
	   // AggregationBuilders.count(name) 计数
	   // AggregationBuilders.sum(name) 聚合
	    AggregationBuilder agg2 = AggregationBuilders.terms("agg2").field(field2);
	    agg1.subAggregation(agg2);
	    searchSourceBuilder.aggregation(agg1);
	    
	    SearchRequest searchRequest = new SearchRequest(indexs).types(type);
	    searchRequest.source(searchSourceBuilder);
	    
	    SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);
	    Terms terms1 = searchResponse.getAggregations().get("agg1");
	    Terms terms2;
	    for (Terms.Bucket bucket1 : terms1.getBuckets()) {
	        terms2 = bucket1.getAggregations().get("agg2");
	        Map<String, Long> map2 = new HashMap<>();
	        for (Terms.Bucket bucket2 : terms2.getBuckets()) {
	            map2.put(bucket2.getKey().toString(), bucket2.getDocCount());
	        }
	        groupMap.put(bucket1.getKey().toString(), map2);
	    }
	    return groupMap;
	}
	
	
	
	//按时间聚合，求TX的和
//DateHistogramInterval.minutes(5)是指按5分钟聚合
//format("yyyy-MM-dd HH:mm")是指聚合的结果的Time的格式
//BucketOrder.aggregation("tx_sum", false)对聚合结果的排序 true为正序 false为倒序
AggregationBuilder aggregation = AggregationBuilders.dateHistogram("time_count").field("Time").fixedInterval(DateHistogramInterval.minutes(5)).format("yyyy-MM-dd HH:mm")
	.order(BucketOrder.aggregation("tx_sum", false));
aggregation.subAggregation(AggregationBuilders.sum("tx_sum").field("Tx"));
sourceBuilder.aggregation(aggregation);

searchRequest.source(sourceBuilder);
//发送请求
SearchResponse searchResponse = client.search(searchRequest,RequestOptions.DEFAULT);

//获取聚合的结果
Map<String,Double> map = new LinkedHashMap<>();
Aggregations aggregations = searchResponse.getAggregations();
Aggregation aggregation1 = aggregations.get("time_count");
List<? extends Histogram.Bucket> buckets = ((Histogram)aggregation1).getBuckets();
for (Histogram.Bucket bucket : buckets){
	String keyAsString = bucket.getKeyAsString();
	Sum sum = bucket.getAggregations().get("tx_sum");
	map.put(keyAsString,sum.getValue());
}
————————————————
版权声明：本文为CSDN博主「CHSXS」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/CHSXS/java/article/details/106216641


group by/count
例如要计算每个球队的球员数，如果使用SQL语句，应表达如下：

select team, count(*) as player_count from player group by team;
ES的java api：

TermsBuilder teamAgg= AggregationBuilders.terms("player_count ").field("team");
sbuilder.addAggregation(teamAgg);
SearchResponse response = sbuilder.execute().actionGet();
　　
group by多个field
例如要计算每个球队每个位置的球员数，如果使用SQL语句，应表达如下：

select team, position, count(*) as pos_count from player group by team, position;
ES的java api：

TermsBuilder teamAgg= AggregationBuilders.terms("player_count ").field("team");
TermsBuilder posAgg= AggregationBuilders.terms("pos_count").field("position");
sbuilder.addAggregation(teamAgg.subAggregation(posAgg));
SearchResponse response = sbuilder.execute().actionGet();
　　

 

max/min/sum/avg
例如要计算每个球队年龄最大/最小/总/平均的球员年龄，如果使用SQL语句，应表达如下：

select team, max(age) as max_age from player group by team;
ES的java api：

TermsBuilder teamAgg= AggregationBuilders.terms("player_count ").field("team");
MaxBuilder ageAgg= AggregationBuilders.max("max_age").field("age");
sbuilder.addAggregation(teamAgg.subAggregation(ageAgg));
SearchResponse response = sbuilder.execute().actionGet();
　　
对多个field求max/min/sum/avg
例如要计算每个球队球员的平均年龄，同时又要计算总年薪，如果使用SQL语句，应表达如下：

select team, avg(age)as avg_age, sum(salary) as total_salary from player group by team;
ES的java api：

TermsBuilder teamAgg= AggregationBuilders.terms("team");
AvgBuilder ageAgg= AggregationBuilders.avg("avg_age").field("age");
SumBuilder salaryAgg= AggregationBuilders.avg("total_salary ").field("salary");
sbuilder.addAggregation(teamAgg.subAggregation(ageAgg).subAggregation(salaryAgg));
SearchResponse response = sbuilder.execute().actionGet();
　　

聚合后对Aggregation结果排序
例如要计算每个球队总年薪，并按照总年薪倒序排列，如果使用SQL语句，应表达如下：

select team, sum(salary) as total_salary from player group by team order by total_salary desc;
ES的java api：

TermsBuilder teamAgg= AggregationBuilders.terms("team").order(Order.aggregation("total_salary ", false);
SumBuilder salaryAgg= AggregationBuilders.avg("total_salary ").field("salary");
sbuilder.addAggregation(teamAgg.subAggregation(salaryAgg));
SearchResponse response = sbuilder.execute().actionGet();
　　

需要特别注意的是，排序是在TermAggregation处执行的，Order.aggregation函数的第一个参数是aggregation的名字，第二个参数是boolean型，true表示正序，false表示倒序。 

Aggregation结果条数的问题
默认情况下，search执行后，仅返回10条聚合结果，如果想反悔更多的结果，需要在构建TermsBuilder 时指定size：

TermsBuilder teamAgg= AggregationBuilders.terms("team").size(15);
综上，聚合操作主要是调用了SearchRequestBuilder的addAggregation方法，通常是传入一个TermsBuilder，子聚合调用TermsBuilder的subAggregation方法，可以添加的子聚合有TermsBuilder、SumBuilder、AvgBuilder、MaxBuilder、MinBuilder等常见的聚合操作。
 
从实现上来讲，SearchRequestBuilder在内部保持了一个私有的 SearchSourceBuilder实例， SearchSourceBuilder内部包含一个List<AbstractAggregationBuilder>，每次调用addAggregation时会调用 SearchSourceBuilder实例，添加一个AggregationBuilder。
同样的，TermsBuilder也在内部保持了一个List<AbstractAggregationBuilder>，调用addAggregation方法（来自父类addAggregation）时会添加一个AggregationBuilder
https://www.cnblogs.com/xionggeclub/p/7975982.html